"""
Cleanup OAuth States Command - DSP (Digital Solutions Platform)

Dieses Django Management Command bereinigt abgelaufene OAuth States aus der Datenbank.
Kann manuell oder automatisiert (z.B. via Cronjob) ausgef√ºhrt werden.

Features:
- Dry-Run und verbose Modus f√ºr sichere Ausf√ºhrung
- Statistiken und Empfehlungen f√ºr regelm√§√üige Bereinigung
- Performance- und Security-Empfehlungen

Author: DSP Development Team
Created: 10.07.2025
Version: 1.0.0
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from core.microsoft_services.models import OAuthState

# --- Management Command: Cleanup abgelaufene OAuth States ---


class Command(BaseCommand):
    """
    Cleanup abgelaufene OAuth States

    Usage:
        python manage.py cleanup_oauth_states
        python manage.py cleanup_oauth_states --dry-run
        python manage.py cleanup_oauth_states --verbose
    """

    help = "Cleanup abgelaufene OAuth States aus der Database"

    def add_arguments(self, parser):
        parser.add_argument(
            "--dry-run",
            action="store_true",
            help="Zeige nur was gel√∂scht werden w√ºrde, ohne tats√§chlich zu l√∂schen",
        )
        parser.add_argument(
            "--verbose",
            action="store_true",
            help="Zeige detaillierte Informationen",
        )

    def handle(self, *args, **options):
        """Command Hauptlogik"""
        dry_run = options["dry_run"]
        verbose = options["verbose"]

        # Aktuelle Zeit f√ºr Vergleich
        now = timezone.now()

        # Abgelaufene States finden
        expired_states = OAuthState.objects.filter(expires_at__lt=now)
        expired_count = expired_states.count()

        if expired_count == 0:
            self.stdout.write(
                self.style.SUCCESS("‚úÖ Keine abgelaufenen OAuth States gefunden")
            )
            return

        # Statistiken anzeigen
        if verbose:
            self.stdout.write("\nüìä OAuth State Statistiken:")
            total_states = OAuthState.objects.count()
            active_states = OAuthState.objects.filter(expires_at__gt=now).count()

            self.stdout.write(f"   Total States: {total_states}")
            self.stdout.write(f"   Aktive States: {active_states}")
            self.stdout.write(f"   Abgelaufene States: {expired_count}")

            # √Ñlteste und neueste abgelaufene States
            if expired_count > 0:
                oldest = expired_states.order_by("created_at").first()
                newest = expired_states.order_by("-created_at").first()

                self.stdout.write(
                    f"   √Ñltester abgelaufener State: {oldest.created_at}"
                )
                self.stdout.write(
                    f"   Neuester abgelaufener State: {newest.created_at}"
                )

        # Dry run oder tats√§chlich l√∂schen
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    f"üîç DRY RUN: W√ºrde {expired_count} abgelaufene OAuth States l√∂schen"
                )
            )

            if verbose and expired_count <= 10:
                self.stdout.write("\nüìã States die gel√∂scht werden w√ºrden:")
                for state in expired_states[:10]:
                    time_expired = now - state.expires_at
                    self.stdout.write(
                        f"   - {state.state[:12]}... (abgelaufen vor {time_expired})"
                    )
        else:
            # Tats√§chlich l√∂schen
            deleted_count = OAuthState.cleanup_expired()

            if deleted_count > 0:
                self.stdout.write(
                    self.style.SUCCESS(
                        f"‚úÖ {deleted_count} abgelaufene OAuth States erfolgreich gel√∂scht"
                    )
                )
            else:
                self.stdout.write(
                    self.style.SUCCESS("‚úÖ Keine OAuth States zu l√∂schen")
                )

        # Performance-Empfehlungen
        if verbose:
            self.stdout.write("\nüí° Empfehlungen:")

            if expired_count > 100:
                self.stdout.write(
                    "   - F√ºhren Sie dieses Command √∂fter aus (z.B. t√§glich)"
                )
                self.stdout.write(
                    "   - Erw√§gen Sie einen Cronjob f√ºr automatische Bereinigung"
                )

            active_count = OAuthState.get_active_count()
            if active_count > 50:
                self.stdout.write(
                    "   - Viele aktive States - pr√ºfen Sie auf h√§ngende OAuth Flows"
                )

            self.stdout.write("   - N√§chste empfohlene Bereinigung: in 24 Stunden")

        # Cronjob Beispiel
        if verbose and not dry_run:
            self.stdout.write("\n‚è∞ Automatische Bereinigung einrichten:")
            self.stdout.write("   F√ºgen Sie zu Ihrer crontab hinzu:")
            self.stdout.write(
                "   0 2 * * * cd /path/to/project && python manage.py cleanup_oauth_states"
            )
            self.stdout.write("   (L√§uft t√§glich um 2:00 Uhr morgens)")
